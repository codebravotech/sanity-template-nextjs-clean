/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Announcement = {
  _type: "announcement";
  category?: "press_releases" | "events" | "stories";
  title?: string;
  summary?: string;
  button?: Button;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  date?: string;
};

export type Announcements = {
  _type: "announcements";
  heading?: string;
  announcements?: Array<{
    _key: string;
  } & Announcement>;
};

export type Link = {
  _type: "link";
  linkType?: "href" | "page";
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  openInNewTab?: boolean;
};

export type CallToAction = {
  _type: "callToAction";
  eyebrow?: string;
  heading: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    _key: string;
  } & VideoBlock>;
  button?: Button;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  videoBlock?: VideoBlock;
  layout?: {
    orientation?: "horizontal" | "vertical";
    contentAlignment?: "textFirst" | "mediaFirst";
  };
};

export type VideoBlock = {
  _type: "videoBlock";
  video?: SanityVideo;
  settings?: {
    loop?: boolean;
    muted?: boolean;
    autoPlay?: boolean;
    title?: string;
  };
};

export type Button = {
  _type: "button";
  label?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type InfoSection = {
  _type: "infoSection";
  heading?: string;
  subheading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    _key: string;
  } & VideoBlock>;
};

export type BlockContentTextOnly = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "post";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & VideoBlock>;

export type ContactForm = {
  _id: string;
  _type: "contactForm";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading: string;
  body?: BlockContentTextOnly;
  successMessage?: BlockContentTextOnly;
  requiredFields: Array<string>;
  optionalFields?: Array<string>;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  content?: BlockContent;
  excerpt?: string;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName: string;
  lastName: string;
  picture: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  heading: string;
  subheading?: string;
  pageBuilder?: Array<{
    _key: string;
  } & CallToAction | {
    _key: string;
  } & InfoSection | {
    _key: string;
  } & VideoBlock | {
    _key: string;
  } & Announcements | {
    heading: string;
    body?: BlockContentTextOnly;
    successMessage?: BlockContentTextOnly;
    requiredFields: Array<string>;
    optionalFields?: Array<string>;
    _type: "contactForm";
    _key: string;
  }>;
};

export type SanityVideo = {
  _type: "sanity.video";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.videoAsset";
  };
  media?: unknown;
};

export type SanityVideoAsset = {
  _id: string;
  _type: "sanity.videoAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  creditLine?: string;
  metadata?: SanityVideoMetadata;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
};

export type SanityVideoMetadata = {
  _type: "sanity.videoMetadata";
  duration?: number;
  framerate?: number;
  aspectRatio?: number;
  hasAudio?: boolean;
  codec?: string;
  bitrate?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Announcement | Announcements | Link | CallToAction | VideoBlock | Button | InfoSection | BlockContentTextOnly | BlockContent | ContactForm | Settings | Post | Person | Page | SanityVideo | SanityVideoAsset | SanityVideoMetadata | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
} | null;
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,      _type == "videoBlock" => {        ...,          "video": {    "metadata": video.asset->metadata,    "playbackId": video.asset->metadata.playbacks[0]._id,    "aspectRatio": video.asset->metadata.aspectRatio,    "originalFilename": video.asset->originalFilename,    "duration": video.asset->metadata.duration,    "assetId": video.asset->_id  }       },      _type == "callToAction" => {          link {      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }      },        button {          ...,          page->        },          "video": {    "metadata": videoBlock.video.asset->metadata,    "playbackId": videoBlock.video.asset->metadata.playbacks[0]._id,    "aspectRatio": videoBlock.video.asset->metadata.aspectRatio,    "originalFilename": videoBlock.video.asset->originalFilename,    "duration": videoBlock.video.asset->metadata.duration,    "assetId": videoBlock.video.asset->_id  },        body[]{          ...,          _type == "videoBlock" => {            ...,              "video": {    "metadata": video.asset->metadata,    "playbackId": video.asset->metadata.playbacks[0]._id,    "aspectRatio": video.asset->metadata.aspectRatio,    "originalFilename": video.asset->originalFilename,    "duration": video.asset->metadata.duration,    "assetId": video.asset->_id  }           }        }      },      _type == "announcements" => {        announcements[] {          ...,          button {            ...,            page->          }        }      },      _type == "contactForm" => {        ...,      },      _type == "infoSection" => {        content[]{          ...,            "video": {    "metadata": video.asset->metadata,    "playbackId": video.asset->metadata.playbacks[0]._id,    "aspectRatio": video.asset->metadata.aspectRatio,    "originalFilename": video.asset->originalFilename,    "duration": video.asset->metadata.duration,    "assetId": video.asset->_id  },          markDefs[]{            ...,              _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }          }        }      },    },  }
export type GetPageQueryResult = {
  _id: string;
  _type: "page";
  name: string;
  slug: Slug;
  heading: string;
  subheading: string | null;
  pageBuilder: Array<{
    _key: string;
    _type: "announcements";
    heading?: string;
    announcements: Array<{
      _key: string;
      _type: "announcement";
      category?: "events" | "press_releases" | "stories";
      title?: string;
      summary?: string;
      button: {
        _type: "button";
        label?: string;
        page: {
          _id: string;
          _type: "page";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          name: string;
          slug: Slug;
          heading: string;
          subheading?: string;
          pageBuilder?: Array<{
            _key: string;
          } & Announcements | {
            _key: string;
          } & CallToAction | {
            _key: string;
          } & InfoSection | {
            _key: string;
          } & VideoBlock | {
            heading: string;
            body?: BlockContentTextOnly;
            successMessage?: BlockContentTextOnly;
            requiredFields: Array<string>;
            optionalFields?: Array<string>;
            _type: "contactForm";
            _key: string;
          }>;
        } | null;
      } | null;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      date?: string;
    }> | null;
  } | {
    _key: string;
    _type: "callToAction";
    eyebrow?: string;
    heading: string;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        };
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    } | {
      _key: string;
      _type: "videoBlock";
      video: {
        metadata: SanityVideoMetadata | null;
        playbackId: null;
        aspectRatio: number | null;
        originalFilename: string | null;
        duration: number | null;
        assetId: string | null;
      };
      settings?: {
        loop?: boolean;
        muted?: boolean;
        autoPlay?: boolean;
        title?: string;
      };
    }> | null;
    button: {
      _type: "button";
      label?: string;
      page: {
        _id: string;
        _type: "page";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name: string;
        slug: Slug;
        heading: string;
        subheading?: string;
        pageBuilder?: Array<{
          _key: string;
        } & Announcements | {
          _key: string;
        } & CallToAction | {
          _key: string;
        } & InfoSection | {
          _key: string;
        } & VideoBlock | {
          heading: string;
          body?: BlockContentTextOnly;
          successMessage?: BlockContentTextOnly;
          requiredFields: Array<string>;
          optionalFields?: Array<string>;
          _type: "contactForm";
          _key: string;
        }>;
      } | null;
    } | null;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    videoBlock?: VideoBlock;
    layout?: {
      orientation?: "horizontal" | "vertical";
      contentAlignment?: "mediaFirst" | "textFirst";
    };
    link: null;
    video: {
      metadata: SanityVideoMetadata | null;
      playbackId: null;
      aspectRatio: number | null;
      originalFilename: string | null;
      duration: number | null;
      assetId: string | null;
    };
  } | {
    heading: string;
    body?: BlockContentTextOnly;
    successMessage?: BlockContentTextOnly;
    requiredFields: Array<string>;
    optionalFields?: Array<string>;
    _type: "contactForm";
    _key: string;
  } | {
    _key: string;
    _type: "infoSection";
    heading?: string;
    subheading?: string;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page: string | null;
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
        post: null;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
      video: {
        metadata: null;
        playbackId: null;
        aspectRatio: null;
        originalFilename: null;
        duration: null;
        assetId: null;
      };
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
      video: {
        metadata: null;
        playbackId: null;
        aspectRatio: null;
        originalFilename: null;
        duration: null;
        assetId: null;
      };
      markDefs: null;
    } | {
      _key: string;
      _type: "videoBlock";
      video: {
        metadata: SanityVideoMetadata | null;
        playbackId: null;
        aspectRatio: number | null;
        originalFilename: string | null;
        duration: number | null;
        assetId: string | null;
      };
      settings?: {
        loop?: boolean;
        muted?: boolean;
        autoPlay?: boolean;
        title?: string;
      };
      markDefs: null;
    }> | null;
  } | {
    _key: string;
    _type: "videoBlock";
    video: {
      metadata: SanityVideoMetadata | null;
      playbackId: null;
      aspectRatio: number | null;
      originalFilename: string | null;
      duration: number | null;
      assetId: string | null;
    };
    settings?: {
      loop?: boolean;
      muted?: boolean;
      autoPlay?: boolean;
      title?: string;
    };
  }> | null;
} | null;
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<{
  slug: string;
  _type: "page";
  _updatedAt: string;
} | {
  slug: string;
  _type: "post";
  _updatedAt: string;
}>;
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type AllPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type MorePostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{    ...,      "video": {    "metadata": video.asset->metadata,    "playbackId": video.asset->metadata.playbacks[0]._id,    "aspectRatio": video.asset->metadata.aspectRatio,    "originalFilename": video.asset->originalFilename,    "duration": video.asset->metadata.duration,    "assetId": video.asset->_id  },    markDefs[]{      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }    }  },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page: string | null;
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
      post: null;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
    video: {
      metadata: null;
      playbackId: null;
      aspectRatio: null;
      originalFilename: null;
      duration: null;
      assetId: null;
    };
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
    video: {
      metadata: null;
      playbackId: null;
      aspectRatio: null;
      originalFilename: null;
      duration: null;
      assetId: null;
    };
    markDefs: null;
  } | {
    _key: string;
    _type: "videoBlock";
    video: {
      metadata: SanityVideoMetadata | null;
      playbackId: null;
      aspectRatio: number | null;
      originalFilename: string | null;
      duration: number | null;
      assetId: string | null;
    };
    settings?: {
      loop?: boolean;
      muted?: boolean;
      autoPlay?: boolean;
      title?: string;
    };
    markDefs: null;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n  *[_type == 'page' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    \"pageBuilder\": pageBuilder[]{\n      ...,\n      _type == \"videoBlock\" => {\n        ...,\n        \n  \"video\": {\n    \"metadata\": video.asset->metadata,\n    \"playbackId\": video.asset->metadata.playbacks[0]._id,\n    \"aspectRatio\": video.asset->metadata.aspectRatio,\n    \"originalFilename\": video.asset->originalFilename,\n    \"duration\": video.asset->metadata.duration,\n    \"assetId\": video.asset->_id\n  }\n \n      },\n      _type == \"callToAction\" => {\n        \n  link {\n      ...,\n      \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n      }\n,\n        button {\n          ...,\n          page->\n        },\n        \n  \"video\": {\n    \"metadata\": videoBlock.video.asset->metadata,\n    \"playbackId\": videoBlock.video.asset->metadata.playbacks[0]._id,\n    \"aspectRatio\": videoBlock.video.asset->metadata.aspectRatio,\n    \"originalFilename\": videoBlock.video.asset->originalFilename,\n    \"duration\": videoBlock.video.asset->metadata.duration,\n    \"assetId\": videoBlock.video.asset->_id\n  }\n,\n        body[]{\n          ...,\n          _type == \"videoBlock\" => {\n            ...,\n            \n  \"video\": {\n    \"metadata\": video.asset->metadata,\n    \"playbackId\": video.asset->metadata.playbacks[0]._id,\n    \"aspectRatio\": video.asset->metadata.aspectRatio,\n    \"originalFilename\": video.asset->originalFilename,\n    \"duration\": video.asset->metadata.duration,\n    \"assetId\": video.asset->_id\n  }\n \n          }\n        }\n      },\n      _type == \"announcements\" => {\n        announcements[] {\n          ...,\n          button {\n            ...,\n            page->\n          }\n        }\n      },\n      _type == \"contactForm\" => {\n        ...,\n      },\n      _type == \"infoSection\" => {\n        content[]{\n          ...,\n          \n  \"video\": {\n    \"metadata\": video.asset->metadata,\n    \"playbackId\": video.asset->metadata.playbacks[0]._id,\n    \"aspectRatio\": video.asset->metadata.aspectRatio,\n    \"originalFilename\": video.asset->originalFilename,\n    \"duration\": video.asset->metadata.duration,\n    \"assetId\": video.asset->_id\n  }\n,\n          markDefs[]{\n            ...,\n            \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n          }\n        }\n      },\n    },\n  }\n": GetPageQueryResult;
    "\n  *[_type == \"page\" || _type == \"post\" && defined(slug.current)] | order(_type asc) {\n    \"slug\": slug.current,\n    _type,\n    _updatedAt,\n  }\n": SitemapDataResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": AllPostsQueryResult;
    "\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": MorePostsQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    content[]{\n    ...,\n    \n  \"video\": {\n    \"metadata\": video.asset->metadata,\n    \"playbackId\": video.asset->metadata.playbacks[0]._id,\n    \"aspectRatio\": video.asset->metadata.aspectRatio,\n    \"originalFilename\": video.asset->originalFilename,\n    \"duration\": video.asset->metadata.duration,\n    \"assetId\": video.asset->_id\n  }\n,\n    markDefs[]{\n      ...,\n      \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n    }\n  },\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": PostQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PostPagesSlugsResult;
    "\n  *[_type == \"page\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PagesSlugsResult;
  }
}
